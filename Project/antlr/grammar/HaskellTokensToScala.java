
public class HaskellTokensToScala extends HaskellBaseListener {

    private StringBuilder fileContents = new StringBuilder();
    private int nextParamNumber;
    private int BASE_PARAM_NUMBER = 0;
    private String scalaModuleName;
    private int indentLevel = 0;
    
    private final String TAB_STRING = "  ";
    
    public HaskellTokensToScala(String haskellModuleName){
        
        // Save the specified haskell name to use in the Scala file definition.
        scalaModuleName = haskellModuleName;
        
        // Set the indent level to zero.
        resetIndentLevel();
    }
    
    /**
     * Generates the Scala file header.
     * 
     * Also embeds all code inside a Scala object.
     * 
     * @param ctx ANTLR Context
     */
    @Override 
    public void enterProgram(HaskellParser.ProgramContext ctx) { 
        
        // Put a header at the top of the file.
        fileContents.append(  "/** Autogenerated Scala Code by antlr parser.\n"
                            + "  * Original Develop: Zayd Hammoudeh (zayd.hammoudeh@sjsu.edu)\n"
                            + "  */\n\n");
        
        // Embed the code in a Scala object
        fileContents.append("object " + scalaModuleName + " {\n\n");
        
        // Increase the indent by one level
        incrementIndentLevel(false);
    }
    
    /**
     * Closes the scala file.
     * 
     * @param ctx ANTLR Context
     */
    @Override 
    public void exitProgram(HaskellParser.ProgramContext ctx) { 
        
        // Decrement the indent and then display it.
        decrementIndentLevel(true);
        
        // Put a header at the top of the file.
        fileContents.append("}\n");
    }

    /**
     * Entry to the haskell function.
     * 
     * @param ctx ANTLR Context
     */
    @Override
    public void enterFunc(HaskellParser.FuncContext ctx) { 
        
        // Put an indent and then add it to the file string.
        addIndent();
        
        // Puts the file header.
        fileContents.append(  "def " + ctx.NAME().getText());
        
        // Reset the parameter number
        resetNextParamNumber();
    }
    
    
    /**
     * Defines the Scala code when starting the type signature (i.e. input parameters)
     * for a Haskell function.
     * 
     * @param ctx The ANTLR Context
     */
    @Override 
    public void enterTypesignature(HaskellParser.TypesignatureContext ctx) { 
        fileContents.append("(");
    }
    
    /**
     * At the end of a type signature, close the function definition
     */
    @Override 
    public void exitTypesignature(HaskellParser.TypesignatureContext ctx) { 
        fileContents.append(  ") = {\n");
        incrementIndentLevel(false);
    }
    
    /**
     * Handles the end of the Haskell function.
     * 
     * @param ctx The ANTLR Context
     */
    @Override 
    public void exitFunc(HaskellParser.FuncContext ctx) { 
        // Decrement the number of indents and then add it to the file.
        decrementIndentLevel(true);
        fileContents.append(  "} // End of function: \"" + ctx.NAME().getText() + "\"\n\n");
    }
    
    
    /**
     * Outputs the converted Haskell code to Scala.
     * 
     * @return Haskell code as a String of Scala Code
     */
    @Override
    public String toString(){
        return fileContents.toString();
    }
    
    /**
     * Creates a standardized, highly customized input parameter name.  This is needed because 
     * by default, Haskell does not have input parameter names.
     * 
     * @param paramNumb       
     * @return              String representing the specified input parameter
     */
    private String makeInputParameterName(int paramNumb){
        return "___" + paramNumb + "___";
    }
    
    /*
     * At the beginning of a function, reset the parameter number.
     */
    private void resetNextParamNumber(){ nextParamNumber = -1; };
    
    /**
     * 
     */
    private void resetIndentLevel(){indentLevel = BASE_PARAM_NUMBER;}
    
    
    /**
     * Increment the indent by one level.
     * 
     * @param printIndent  If true, an indent at the specified indent level is added.
     */
    private void incrementIndentLevel(boolean printIndent){
        indentLevel++;
        if(printIndent) addIndent();
    }
    
    
    /**
     * Decrements the indent by one level.
     * 
     * @param printIndent  If true, an indent at the specified indent level is added.
     */
    private void decrementIndentLevel(boolean printIndent){
        indentLevel--;
        if(printIndent) addIndent();
    }
    
    /**
     * Adds an indent based off the specified indent level to the scala file contents.
     */
    private void addIndent(){
        for(int i = 0; i < indentLevel; i++)
            fileContents.append(TAB_STRING);
    }
    
}
